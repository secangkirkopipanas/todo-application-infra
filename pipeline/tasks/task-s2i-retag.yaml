apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: s2i-retag
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i retag"
spec:
  description: >-
    s2i-retag task pulls the target image to be tagged, tag it, and push it to registry.
  params:
    - name: VERSION
      default: latest
      description: The tag of java imagestream for java version
      type: string
    - name: TLSVERIFY
      default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: GIT_COMMIT_ID
      description: Git commit ID
      type: string
    - name: GIT_REF
      description: Git ref
      type: string
    - name: BUILDER_IMAGE
      default: >-
        registry.redhat.io/rhel8/buildah@sha256:00795fafdab9bbaa22cd29d1faa1a01e604e4884a2c935c1bf8e3d1f0ad1c084
      description: The location of the buildah builder image.
      type: string
    - name: SKIP_PUSH
      default: 'false'
      description: Skip pushing the built image
      type: string
    - name: ENV_VARS
      default: []
      description: Environment variables to set during _build-time_.
      type: array
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
    - image: $(params.BUILDER_IMAGE)
      name: retag-and-push
      script: |
        #!/usr/bin/env bash
        set +x

        printf -- "---------------------------------------------------\n"
        printf    " Re-tag Container Image and Push to Registry       \n"
        printf -- "---------------------------------------------------\n\n"

        TAG_NAME="$(params.GIT_COMMIT_ID)"
        if [ ${#TAG_NAME} -gt 30 ]; then
          TAG_NAME="${TAG_NAME:0:10}"
        fi
        echo "Base image name: $(params.IMAGE):$TAG_NAME"
        NEW_TAG_NAME="$(params.GIT_REF)"
        NEW_TAG_NAME="${NEW_TAG_NAME//*\/}"
        printf -- "New image name: $(params.IMAGE):$NEW_TAG_NAME\n\n"

        echo "IMAGE_NAME=$(params.IMAGE)" >> $(workspaces.infra-repo.path)/image.env
        echo "TAG_NAME=$NEW_TAG_NAME" >> $(workspaces.infra-repo.path)/image.env

        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

        echo "-> Pulling and tag target image"
        buildah pull docker://$(params.IMAGE):$TAG_NAME
        buildah tag $(params.IMAGE):$TAG_NAME $(params.IMAGE):$NEW_TAG_NAME
        echo

        echo "-> List of available images"
        buildah images
        echo

        echo "-> Pushing new re-tagged image"
        buildah push --tls-verify=$(params.TLSVERIFY) $(params.IMAGE):$NEW_TAG_NAME
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: env-vars
  workspaces:
    - name: infra-repo
    - description: >-
        An optional workspace that allows providing a .docker/config.json file
        for Buildah to access the container registry. The file should be placed
        at the root of the Workspace with name config.json.
      name: dockerconfig
      optional: true